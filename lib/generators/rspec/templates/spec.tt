<%- if %w[selenium watir].include? automation -%>
# frozen_string_literal: true

require_relative '../helpers/spec_helper'
require_relative '../models/model_factory'
require_relative '../page_objects/pages/account'
require_relative '../page_objects/pages/login'

<%- if axe_support == false -%>
describe 'Login' do
  subject(:header) { account_page.header.customer_name }

  let(:user) { ModelFactory.for('users')['registered user'] }
  let(:login_page) { Login.new(<% if automation == 'watir' -%>browser<% else -%>driver<% end -%>) }
  let(:account_page) { Account.new(<% if automation == 'watir' -%>browser<% else -%>driver<% end -%>) }

  before do
    login_page.visit
    login_page.login(user['username'], password)
  end

  context 'with right credentials' do
    let(:password) { user['password'] }

    it 'can successfully log in' do
    <%- if visual_automation == true -%>
      check_page account_page
    <%- else -%>
      expect(header).to eq "Welcome back #{user['name']}"
    <%- end -%>
    end
  end

  context 'with wrong credentials' do
    let(:password) { 'wrongPassword' }

    it 'cannot log in' do
    <%- if visual_automation == true -%>
      check_page login_page
    <%- else -%>
      expect(header).to eq 'Login or register'
    <%- end -%>
    end
  end
end
<%- end -%>
<%- if axe_support == true -%>
 let(:login) { Login.new(driver) }
 let(:account) { Account.new(driver) }
 let(:user) { ModelFactory.for('users')['registered user'] }

 before do
   login.visit
   login.log_as(user['username'], user['password'])
 end

 context 'with a login user on the account page' do
   it 'no accessibility errors are present on the page' do
     expect(account.page).to be_axe_clean
   end

   it 'no accessibility errors are present on the transaction history' do
     transaction_history = '.dash-tile.dash-tile-balloon.clearfix'
     expect(account.page).to be_axe_clean.within transaction_history
   end

   it 'no accessibility errors are present on the heading' do
     heading = '.maintext'
     expect(account.page).to be_axe_clean.within heading
   end
 end
end
<%- end -%>
<%- elsif automation == 'sparkling_ios' -%>
require_relative '../helpers/spec_helper'
require_relative '../page_objects/pages/home'
require_relative '../page_objects/pages/pdp'

class PdpSpec
  describe 'PDP page' do

    let(:home_page) { Home.new(app) }
    let(:pdp_page) { Pdp.new(app) }

    it 'shows add to cart button' do
      home_page.go_to_backpack_pdp
      expect(pdp_page.add_to_cart_text).to eq 'Add To Cart'
    end
  end
end
<%- else -%>
<% if automation == 'cross_platform' -%>
require_relative '../helpers/appium_helper'
<%- end -%>
require_relative '../helpers/spec_helper'
require_relative '../page_objects/pages/home'
require_relative '../page_objects/pages/pdp'

class PdpSpec
  describe 'PDP' do

    let(:home_page) { Home.new(driver) }
    let(:pdp_page) { Pdp.new(driver) }

    it 'shows add to cart button' do
      home_page.go_to_backpack_pdp
      expect(pdp_page.add_to_cart_text).to eq 'Add To Cart'
    end
  end
end
<%- end -%>